diff -r 52e1a731f85e -r 60932931559a coders/palm.c
--- a/coders/palm.c	Wed Dec 13 07:55:41 2017 -0600
+++ b/coders/palm.c	Sat Dec 16 10:08:39 2017 -0600
@@ -787,29 +787,29 @@
 
 static const unsigned char *
 GetPalmPaletteGivenBits(const unsigned int bits,
-                        size_t *size)
+                       size_t *entries)
 {
   const unsigned char
     *palette = (const unsigned char *) NULL;
 
-  *size=0;
+  *entries=0;
   switch (bits)
     {
     case 1:
       palette=(const unsigned char *) PalmPalette1;
-      *size=sizeof(PalmPalette1);
+      *entries=sizeof(PalmPalette1)/3U;
       break;
     case 2:
       palette=(const unsigned char *) PalmPalette2;
-      *size=sizeof(PalmPalette2);
+      *entries=sizeof(PalmPalette2)/3U;
       break;
     case 4:
       palette=(const unsigned char *) PalmPalette4;
-      *size=sizeof(PalmPalette4);
+      *entries=sizeof(PalmPalette4)/3U;
       break;
     case 8:
       palette=(const unsigned char *) PalmPalette8;
-      *size=sizeof(PalmPalette8);
+      *entries=sizeof(PalmPalette8)/3U;
       break;
     }
   return palette;
@@ -859,7 +859,7 @@
   Image
     *image;
 
-  IndexPacket
+  unsigned int
     index;
 
   long
@@ -993,141 +993,85 @@
   /*
     Initialize image colormap.
   */
-  if ((palm_header.bits_per_pixel < 16) &&
-      !AllocateImageColormap(image,1L << palm_header.bits_per_pixel))
-    ThrowPALMReaderException(ResourceLimitError,MemoryAllocationFailed,image);
-
   if ((palm_header.bits_per_pixel == 1) ||
       (palm_header.bits_per_pixel == 2) ||
       (palm_header.bits_per_pixel == 4) ||
-      ((palm_header.bits_per_pixel == 8) &&
-       !(palm_header.flags & PALM_HAS_COLORMAP_FLAG)))
+      (palm_header.bits_per_pixel == 8))
     {
-      const unsigned char
-        *palette;
-
       size_t
-        size;
+        palette_entries=0;
 
-      palette=GetPalmPaletteGivenBits(palm_header.bits_per_pixel,
-                                      &size);
-      if (palette)
+      const unsigned char
+        *fixed_palette = NULL;
+
+      if (!AllocateImageColormap(image,1UL << palm_header.bits_per_pixel))
+        ThrowPALMReaderException(ResourceLimitError,MemoryAllocationFailed,image);
+
+      if ((palm_header.bits_per_pixel == 8) &&
+          (palm_header.flags & PALM_HAS_COLORMAP_FLAG))
         {
-          if (image->logging)
-            (void) LogMagickEvent(CoderEvent,GetMagickModule(),
-                                  "Default %u bit palette of %"
-                                  MAGICK_SIZE_T_F "u bytes...",
-                                  palm_header.bits_per_pixel,
-                                  (MAGICK_SIZE_T) size);
-          for (index=0; index < image->colors; index++)
+          palette_entries = ReadBlobMSBShort(image);
+
+          if (EOFBlob(image))
+            ThrowPALMReaderException(CorruptImageError,UnexpectedEndOfFile,image);
+          if (palette_entries > image->colors)
+            ThrowPALMReaderException(CorruptImageError,ColormapExceedsColorsLimit,image);
+        }
+
+      if (palette_entries == 0)
+        fixed_palette=GetPalmPaletteGivenBits(palm_header.bits_per_pixel, &palette_entries);
+      if (palette_entries == 0)
+        palette_entries=image->colors;
+
+      if (image->logging)
+        (void) LogMagickEvent(CoderEvent,GetMagickModule(),
+                              "%s %u bit palette with %" MAGICK_SIZE_T_F "u colors",
+                              fixed_palette ? "Default" : "Custom",
+                              palm_header.bits_per_pixel,
+                              palette_entries);
+
+      if (fixed_palette)
+        {
+          const unsigned char
+            *palette = fixed_palette;
+          for (index=0; index < palette_entries; index++)
             {
               image->colormap[index].red=ScaleCharToQuantum(*palette++);
               image->colormap[index].green=ScaleCharToQuantum(*palette++);
               image->colormap[index].blue=ScaleCharToQuantum(*palette++);
             }
         }
-    }
-
-  else if (palm_header.bits_per_pixel == 8)
-    {
-      i = 0;
-      if (palm_header.flags & PALM_HAS_COLORMAP_FLAG)
+      else if (palm_header.flags & PALM_HAS_COLORMAP_FLAG)
         {
-          unsigned int
-            count;
-
-          count = ReadBlobMSBShort(image);
-
-          if (image->logging)
-            (void) LogMagickEvent(CoderEvent,GetMagickModule(),
-                                  "Custom %u bit palette with %u colors (%"
-                                  MAGICK_SIZE_T_F "u bytes)...",
-                                  palm_header.bits_per_pixel,
-                                  count,
-                                  (MAGICK_SIZE_T) count*3);
-
-          if (count > image->colors)
-            ThrowPALMReaderException(CorruptImageError,ColormapExceedsColorsLimit,image);
-
           /*
             Is palette really written reversed?
           */
-          for (i = 0; i < count; i++)
+          for (i = 0; i < palette_entries; i++)
             {
               /* unsigned int r, g, b; */
               (void) ReadBlobByte(image);
-              index=255 - i;
+              index=(image->colors-1) - i;
               VerifyColormapIndex(image,index);
-#if 0
-              r=ReadBlobByte(image);
-              g=ReadBlobByte(image);
-              b=ReadBlobByte(image);
-              fprintf(stdout,"{ %3u, %3u, %3u },\n", r, g, b);
-#endif
-#if 1
               image->colormap[index].red = ScaleCharToQuantum(ReadBlobByte(image));
               image->colormap[index].green = ScaleCharToQuantum(ReadBlobByte(image));
               image->colormap[index].blue = ScaleCharToQuantum(ReadBlobByte(image));
-#endif
               if (EOFBlob(image))
                 ThrowPALMReaderException(CorruptImageError,UnexpectedEndOfFile,image);
             }
           /*
             Initialize remaining range ???.
           */
-          for (; i < (1U << palm_header.bits_per_pixel); i++)
+          for (; i < image->colors; i++)
             {
-              index=255 - i;
+              index=(image->colors-1) - i;
               image->colormap[index].red = 0;
               image->colormap[index].green = 0;
               image->colormap[index].blue = 0;
             }
         }
-#if 0
-      for (; i < (1U << palm_header.bits_per_pixel); i++)
-        {
-          index=255 - i;
-          VerifyColormapIndex(image,index);
-          image->colormap[index].red = ScaleCharToQuantum(PalmPalette[i][0]);
-          image->colormap[index].green = ScaleCharToQuantum(PalmPalette[i][1]);
-          image->colormap[index].blue = ScaleCharToQuantum(PalmPalette[i][2]);
-        }
-#endif
-#if 0
-      for (i=0; i < (1U << palm_header.bits_per_pixel); i++)
-        {
-          fprintf(stdout,"{ %3u, %3u, %3u },\n",
-                  ScaleQuantumToChar(image->colormap[i].red),
-                  ScaleQuantumToChar(image->colormap[i].green),
-                  ScaleQuantumToChar(image->colormap[i].blue));
-        }
-#endif
     }
 
-image->depth = 8;
-#if 0
-  if (palm_header.bits_per_pixel < 16)
-    {
-      image->storage_class = PseudoClass;
-      image->depth = 8;
-    }
-  else
-    {
-      image->storage_class = DirectClass;
-      image->depth = 8;
-    }
-#endif
-
-#if 0
-  if (image->storage_class == PseudoClass)
-    for (i=0; i < image->colors; i++)
-      fprintf(stderr,"%03u: %3u, %3u, %3u\n",
-              i,
-              ScaleQuantumToChar(image->colormap[i].red),
-              ScaleQuantumToChar(image->colormap[i].green),
-              ScaleQuantumToChar(image->colormap[i].blue));
-#endif
-
+  image->depth = 8;
   image->compression = NoCompression;
   if (palm_header.flags & PALM_IS_COMPRESSED_FLAG)
     {
